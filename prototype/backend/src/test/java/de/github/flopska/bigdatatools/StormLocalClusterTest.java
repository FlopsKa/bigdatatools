package de.github.flopska.bigdatatools;

import org.apache.storm.Config;
import org.apache.storm.ILocalCluster;
import org.apache.storm.LocalCluster;
import org.apache.storm.Testing;
import org.apache.storm.generated.StormTopology;
import org.apache.storm.testing.TestJob;
import org.apache.storm.trident.Stream;
import org.apache.storm.trident.TridentState;
import org.apache.storm.trident.TridentTopology;
import org.apache.storm.trident.operation.builtin.Count;
import org.apache.storm.trident.operation.builtin.Debug;
import org.apache.storm.trident.testing.FeederBatchSpout;
import org.apache.storm.trident.testing.MemoryMapState;
import org.apache.storm.tuple.Fields;
import org.apache.storm.tuple.Values;
import org.junit.After;
import org.junit.Before;
/*
 * This Java source file was generated by the Gradle 'init' task.
 */
import org.junit.Test;

import com.google.common.collect.ImmutableList;

public class StormLocalClusterTest {

	LocalCluster cluster;

	@Before
	public void setUp() {
		// cluster = new LocalCluster();
	}

	@Test
	public void useTestingFramework() {
		Testing.withLocalCluster(new TestJob() {

			@Override
			public void run(ILocalCluster cluster) throws Exception {
				FeederBatchSpout spout = new FeederBatchSpout(ImmutableList.of("word"));

				TridentTopology tridentTopology = new TridentTopology();
				Stream wordCount = tridentTopology.newStream("feeder-batch-spout", spout).filter(new Debug());
//						.persistentAggregate(new MemoryMapState.Factory(), new Count(), new Fields("count"));
				StormTopology topology = tridentTopology.build();
				cluster.submitTopology("testing", new Config(), topology);
				spout.feed(ImmutableList.of(new Values("test123")));
				// LocalDRPC drpc = new LocalDRPC();
				// tridentTopology.newDRPCStream("feeder-batch-spout", drpc)
				// .stateQuery(wordCount, new Fields("args"), new MapGet(), new
				// Fields("count"));
				// drpc.shutdown();
				// System.out.println("============== OUTPUT ================");
				// System.out.println("MyValue " +
				// drpc.execute("feeder-batch-spout", "bar"));
				cluster.shutdown();
			}
		});
	}

	@After
	public void tearDown() {
		// cluster.shutdown();
	}
}
